// DonationForm.jsx

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Modal from '../Modal/Modal'; // Adjust the import path if necessary

// --- Razorpay Test Key ID (IMPORTANT: Replace with your actual TEST Key ID) ---
// In a real application, you might fetch this from an API endpoint for better security,
// but for test keys and simplicity, hardcoding it here is common practice.
const RAZORPAY_KEY_ID = import.meta.env.VITE_RAZORPAY_KEY; // <--- REPLACE THIS WITH YOUR ACTUAL RAZORPAY TEST KEY ID

const DonationForm = () => {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        amount: '',
        cause: 'Old Age Home',
    });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [modalTitle, setModalTitle] = useState('');
    const [modalMessage, setModalMessage] = useState('');
    const [isProcessing, setIsProcessing] = useState(false);

    const causes = ['Old Age Home', 'Orphanage', 'Medical Emergency', 'Education', 'Environmental'];

    // Effect to load Razorpay SDK dynamically
    useEffect(() => {
        const script = document.createElement('script');
        script.src = 'https://checkout.razorpay.com/v1/checkout.js';
        script.async = true;
        document.body.appendChild(script);

        return () => {
            // Cleanup: remove the script when component unmounts
            document.body.removeChild(script);
        };
    }, []); // Empty dependency array means this runs once on mount

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prevState => ({
            ...prevState,
            [name]: value,
        }));
    };

    const displayRazorpay = async (orderId, amount, currency, name, email) => {
        const options = {
            key: RAZORPAY_KEY_ID, // Your Public Key ID
            amount: amount,       // Amount in smallest currency unit (from backend)
            currency: currency,   // Currency (from backend)
            name: 'Your Donation Platform',
            description: `Donation for ${formData.cause}`,
            order_id: orderId,    // Order ID generated by your backend
            handler: async function (response) {
                // This function is called when the payment is successful
                console.log('Razorpay Response:', response);

                try {
                    // Send verification details back to your backend
                    const verificationResponse = await axios.post(`${import.meta.env.VITE_API_URL}/api/payment/verify`, {
                        orderId: response.razorpay_order_id,
                        paymentId: response.razorpay_payment_id,
                        signature: response.razorpay_signature,
                        donationData: { // Send original donation data to save in DB
                            name: formData.name,
                            email: formData.email,
                            amount: parseFloat(formData.amount), // Original amount in rupees
                            cause: formData.cause,
                        },
                    });

                    if (verificationResponse.data.paymentStatus === 'success') {
                        setModalTitle('Thank You!');
                        setModalMessage('Your donation has been successfully submitted and verified!');
                        setIsModalOpen(true);
                        setFormData({
                            name: '',
                            email: '',
                            amount: '',
                            cause: 'Old Age Home',
                        });
                    } else {
                        // This case should ideally be caught by backend verification, but good to have a fallback
                        setModalTitle('Payment Error');
                        setModalMessage('Payment was successful, but verification failed. Please contact support.');
                        setIsModalOpen(true);
                    }
                } catch (error) {
                    console.error('Payment Verification Error:', error);
                    let errorMsg = 'An error occurred during payment verification. Please try again.';
                    if (error.response && error.response.data && error.response.data.message) {
                        errorMsg = error.response.data.message;
                    }
                    setModalTitle('Verification Failed');
                    setModalMessage(errorMsg);
                    setIsModalOpen(true);
                } finally {
                    setIsProcessing(false); // Ensure processing state is reset
                }
            },
            prefill: {
                name: name,
                email: email,
                // contact: '9999999999', // Optional: if you collect phone number
            },
            notes: {
                cause: formData.cause,
                // You can add more notes here for your reference
            },
            theme: {
                color: '#F37254', // A nice orange color for Razorpay theme
            },
        };

        // Open Razorpay Checkout (make sure window.Razorpay is available)
        if (window.Razorpay) {
            const rzp = new window.Razorpay(options);
            rzp.on('payment.failed', function (response) {
                // This function is called if the payment fails or is cancelled
                console.error('Razorpay Payment Failed:', response);
                setModalTitle('Payment Failed');
                setModalMessage(`Your payment failed: ${response.error.description || 'Unknown error'}. Please try again.`);
                setIsModalOpen(true);
                setIsProcessing(false); // Reset processing state
            });
            rzp.open();
        } else {
            setModalTitle('Error');
            setModalMessage('Razorpay SDK not loaded. Please try refreshing the page.');
            setIsModalOpen(true);
            setIsProcessing(false);
        }
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsProcessing(true);

        // Client-side Validation
        if (!formData.name || !formData.email || !formData.amount || !formData.cause) {
            setModalTitle('Validation Error');
            setModalMessage('Please fill in all the required fields.');
            setIsModalOpen(true);
            setIsProcessing(false);
            return;
        }

        if (isNaN(formData.amount) || parseFloat(formData.amount) <= 0) {
            setModalTitle('Validation Error');
            setModalMessage('Please enter a valid donation amount.');
            setIsModalOpen(true);
            setIsProcessing(false);
            return;
        }

        try {
            // 1. Create Order on Backend
            const orderResponse = await axios.post(`${import.meta.env.VITE_API_URL}/api/payment/create-order`, {
                amount: parseFloat(formData.amount), // Send amount in rupees to your backend
                cause: formData.cause,
                name: formData.name,
                email: formData.email,
            });

            const { orderId, amount, currency, user } = orderResponse.data;

            // 2. Open Razorpay Checkout
            await displayRazorpay(orderId, amount, currency, user.name, user.email);

            // Note: The `setIsProcessing(false)` and `setFormData` are now handled
            // within the `displayRazorpay` function's `handler` or `payment.failed` callback.
            // This ensures state updates happen only after the payment flow completes.

        } catch (error) {
            console.error('Error creating order or initiating payment:', error);
            let errorMsg = 'There was an error setting up your payment. Please try again.';
            if (error.response && error.response.data && error.response.data.message) {
                errorMsg = error.response.data.message;
            }
            setModalTitle('Payment Setup Error');
            setModalMessage(errorMsg);
            setIsModalOpen(true);
            setIsProcessing(false); // Reset processing state if an error occurs before Razorpay opens
        }
    };

    const closeModal = () => {
        setIsModalOpen(false);
    };

    return (
        <div className="max-w-lg mx-auto p-8 bg-white shadow-lg rounded-lg mt-8">
            <h2 className="text-3xl font-semibold text-orange-700 mb-6 text-center">Make a Donation</h2>
            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Name Field */}
                <div>
                    <label htmlFor="name" className="block text-gray-700 font-medium mb-2">
                        Your Name
                    </label>
                    <input
                        type="text"
                        name="name"
                        id="name"
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="Enter your name"
                        className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                        required
                    />
                </div>

                {/* Email Field */}
                <div>
                    <label htmlFor="email" className="block text-gray-700 font-medium mb-2">
                        Your Email
                    </label>
                    <input
                        type="email"
                        name="email"
                        id="email"
                        value={formData.email}
                        onChange={handleChange}
                        placeholder="Enter your email"
                        className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                        required
                    />
                </div>

                {/* Amount Field */}
                <div>
                    <label htmlFor="amount" className="block text-gray-700 font-medium mb-2">
                        Donation Amount (₹)
                    </label>
                    <input
                        type="number"
                        name="amount"
                        id="amount"
                        min="1"
                        step="0.01" // Allows for rupee precision
                        value={formData.amount}
                        onChange={handleChange}
                        placeholder="Enter amount in ₹"
                        className="w-full px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                        required
                    />
                </div>

                {/* Cause Dropdown */}
                <div>
                    <label htmlFor="cause" className="block text-gray-700 font-medium mb-2">
                        Select Cause
                    </label>
                    <select
                        id="cause"
                        name="cause"
                        value={formData.cause}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-orange-500"
                        required
                    >
                        {causes.map((cause, index) => (
                            <option key={index} value={cause}>
                                {cause}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Submit Button */}
                <div>
                    <button
                        type="submit"
                        className={`w-full bg-orange-600 text-white py-3 px-6 rounded-md hover:bg-orange-700 transition duration-200 ${
                            isProcessing ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={isProcessing}
                    >
                        {isProcessing ? 'Processing Payment...' : 'Donate Now'}
                    </button>
                </div>
            </form>

            {/* Success/Error Modal */}
            <Modal isOpen={isModalOpen} onClose={closeModal} title={modalTitle}>
                <p className="text-gray-700">{modalMessage}</p>
            </Modal>
        </div>
    );
};

export default DonationForm;